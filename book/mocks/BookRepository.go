// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	model "book/internal/core/model"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// CreateAuthor provides a mock function with given fields: author
func (_m *BookRepository) CreateAuthor(author *model.Author) error {
	ret := _m.Called(author)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Author) error); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBook provides a mock function with given fields: book
func (_m *BookRepository) CreateBook(book *model.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAuthorByFullNameForCreate provides a mock function with given fields: authorFirstName, authorLastName
func (_m *BookRepository) FindAuthorByFullNameForCreate(authorFirstName string, authorLastName string) (*model.Author, error) {
	ret := _m.Called(authorFirstName, authorLastName)

	if len(ret) == 0 {
		panic("no return value specified for FindAuthorByFullNameForCreate")
	}

	var r0 *model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Author, error)); ok {
		return rf(authorFirstName, authorLastName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Author); ok {
		r0 = rf(authorFirstName, authorLastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(authorFirstName, authorLastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBooks provides a mock function with given fields:
func (_m *BookRepository) GetAllBooks() ([]model.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: id
func (_m *BookRepository) GetBookById(id string) (*model.Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookById")
	}

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: book
func (_m *BookRepository) UpdateBook(book *model.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
