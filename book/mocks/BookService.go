// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	model "book/internal/core/model"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// CreateServiceBook provides a mock function with given fields: book
func (_m *BookService) CreateServiceBook(book *model.RequestBook) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RequestBook) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields:
func (_m *BookService) GetAllBooks() (*[]model.ResponseBook, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 *[]model.ResponseBook
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]model.ResponseBook, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]model.ResponseBook); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.ResponseBook)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: bookId
func (_m *BookService) GetBookById(bookId string) (*model.ResponseBook, error) {
	ret := _m.Called(bookId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookById")
	}

	var r0 *model.ResponseBook
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ResponseBook, error)); ok {
		return rf(bookId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ResponseBook); ok {
		r0 = rf(bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResponseBook)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: book, bookId
func (_m *BookService) UpdateBook(book *model.RequestBookUpdate, bookId string) (*model.RequestBookUpdate, error) {
	ret := _m.Called(book, bookId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 *model.RequestBookUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.RequestBookUpdate, string) (*model.RequestBookUpdate, error)); ok {
		return rf(book, bookId)
	}
	if rf, ok := ret.Get(0).(func(*model.RequestBookUpdate, string) *model.RequestBookUpdate); ok {
		r0 = rf(book, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RequestBookUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.RequestBookUpdate, string) error); ok {
		r1 = rf(book, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
